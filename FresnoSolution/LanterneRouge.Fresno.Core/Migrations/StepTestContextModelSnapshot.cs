// <auto-generated />
using System;
using LanterneRouge.Fresno.Core.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LanterneRouge.Fresno.Core.Migrations
{
    [DbContext(typeof(StepTestContext))]
    partial class StepTestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("LanterneRouge.Fresno.Core.Entity.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<int>("HeartRate")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.Property<bool>("InCalculation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnOrder(6);

                    b.Property<float>("Lactate")
                        .HasColumnType("REAL")
                        .HasColumnOrder(4);

                    b.Property<float>("Load")
                        .HasColumnType("REAL")
                        .HasColumnOrder(5);

                    b.Property<int>("Sequence")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<Guid>("StepTestId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("StepTestId");

                    b.ToTable("Measurement", (string)null);
                });

            modelBuilder.Entity("LanterneRouge.Fresno.Core.Entity.StepTest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("EffortUnit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("W")
                        .HasColumnOrder(3);

                    b.Property<float>("Increase")
                        .HasColumnType("REAL")
                        .HasColumnOrder(6);

                    b.Property<float>("LoadPreset")
                        .HasColumnType("REAL")
                        .HasColumnOrder(5);

                    b.Property<long>("StepDuration")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(4);

                    b.Property<float>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Bike")
                        .HasColumnOrder(2);

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<float>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StepTest", null, t =>
                        {
                            t.HasCheckConstraint("CK_EFFORTUNIT", "[EffortUnit] = 'W' OR [EffortUnit] = 'm-s'");

                            t.HasCheckConstraint("CK_TESTTYPE", "[TestType] = 'Bike' OR [TestType] = 'Run'");
                        });
                });

            modelBuilder.Entity("LanterneRouge.Fresno.Core.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(3);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.Property<int?>("MaxHr")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostCity")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User", null, t =>
                        {
                            t.HasCheckConstraint("CK_SEX", "[Sex] = 'M' OR [Sex] = 'F'");
                        });
                });

            modelBuilder.Entity("LanterneRouge.Fresno.Core.Entity.Measurement", b =>
                {
                    b.HasOne("LanterneRouge.Fresno.Core.Entity.StepTest", "StepTest")
                        .WithMany("Measurements")
                        .HasForeignKey("StepTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepTest");
                });

            modelBuilder.Entity("LanterneRouge.Fresno.Core.Entity.StepTest", b =>
                {
                    b.HasOne("LanterneRouge.Fresno.Core.Entity.User", "User")
                        .WithMany("StepTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LanterneRouge.Fresno.Core.Entity.StepTest", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("LanterneRouge.Fresno.Core.Entity.User", b =>
                {
                    b.Navigation("StepTests");
                });
#pragma warning restore 612, 618
        }
    }
}
