<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:LanterneRouge.Fresno.WpfClient"
                    xmlns:helper="clr-namespace:LanterneRouge.Fresno.WpfClient.MVVM"
                    xmlns:vw="clr-namespace:LanterneRouge.Fresno.WpfClient.View"
                    xmlns:vm="clr-namespace:LanterneRouge.Fresno.WpfClient.ViewModel">
    <!-- This template applies an AllCustomersView to an instance 
  of the AllCustomersViewModel class shown in the main window.
  -->
    <DataTemplate DataType="{x:Type vm:AllUsersViewModel}">
        <vw:AllUsersView />
    </DataTemplate>

    <!-- 
  This template applies a CustomerView to an instance  
  of the CustomerViewModel class shown in the main window.
  -->
    <DataTemplate DataType="{x:Type vm:AllStepTestsViewModel}">
        <vw:AllStepTestsView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:AllMeasurementsViewModel}">
        <vw:AllMeasurementsView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:UserViewModel}">
        <vw:UserView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:StepTestViewModel}">
        <vw:StepTestView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:FblcCalculationViewModel}">
        <vw:FblcCalculationView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:FrpbCalculationViewModel}">
        <vw:FrpbCalculationView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:LtCalculationViewModel}">
        <vw:LtCalculationView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:DMaxCalculationViewModel}">
        <vw:DMaxCalculationView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:LtLogCalculationViewModel}">
        <vw:LtLogCalculationView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:StepTestsPlotViewModel}">
        <vw:StepTestsPlotView />
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:MeasurementViewModel}">
        <vw:MeasurementView />
    </DataTemplate>

    <!-- 
  This style configures both of the main content areas in the main window.
  -->

    <LinearGradientBrush x:Key="Brush_HeaderBackground" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#66FF0000" Offset="0" />
        <GradientStop Color="#BBFF0000" Offset="1" />
    </LinearGradientBrush>

    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Background="{StaticResource Brush_HeaderBackground}" BorderBrush="LightGray" BorderThickness="1" CornerRadius="5" Margin="4" Padding="4" SnapsToDevicePixels="True" >
                        <TextBlock FontSize="14" FontWeight="Bold" Foreground="White" HorizontalAlignment="Center" Text="{TemplateBinding Content}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- This template ensures that content of a HeaderedContentControl  fills the available vertical space. -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter DockPanel.Dock="Top" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" />
                        <ContentPresenter ContentSource="Content" ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
  This style ensures that the borders in the main window are consistent.
  -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Margin="2,6">
                        <Hyperlink Command="{Binding Path=Command}">
                          <TextBlock Text="{Binding Path=DisplayName}" />
                        </Hyperlink>
                    </TextBlock>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="Auto">
            <Button Command="{Binding Path=CloseCommand}" Content="X" Cursor="Hand" DockPanel.Dock="Right" Focusable="False" FontFamily="Courier" FontSize="9" FontWeight="Bold" Margin="0,1,0,0" Padding="0" VerticalContentAlignment="Center" Width="16" Height="16"/>
            <Image Source="{Binding Path=ItemIcon}" Height="16" Width="16" Margin="5,0,5,0" VerticalAlignment="Center"/>
            <ContentPresenter Content="{Binding Path=DisplayName}" VerticalAlignment="Center" Margin="0,0,3,0" />
        </DockPanel>
    </DataTemplate>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl IsSynchronizedWithCurrentItem="True" ItemsSource="{Binding Workspaces}" ItemTemplate="{StaticResource ClosableTabItemTemplate}" Margin="4" SelectedItem="{Binding SelectedItem}"/>
    </DataTemplate>

    <!-- Style for All... listview items -->
    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
        <Setter Property="Tag" Value="{Binding DataContext.ContextMenuItemCommands, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}" ItemsSource="{Binding}">
                    <ContextMenu.ItemContainerStyle>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header" Value="{Binding DisplayName}"/>
                            <Setter Property="Command" Value="{Binding Command}"/>
                        </Style>
                    </ContextMenu.ItemContainerStyle>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="5,5,5,5"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#EEEEEEEE" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>